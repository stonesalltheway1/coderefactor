name: Release

on:
  push:
    tags:
      - 'v*'  # Push events to matching v*, i.e., v1.0, v20.15.10
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (without v prefix)'
        required: true
        default: ''

jobs:
  test:
    name: Run tests before release
    uses: ./.github/workflows/tests.yml

  build:
    name: Build and create release
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: 'requirements/dev.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt
          pip install build twine wheel

      - name: Extract version from tag
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
            echo "TAG=v${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            TAG=${GITHUB_REF#refs/tags/}
            echo "VERSION=${TAG#v}" >> $GITHUB_ENV
            echo "TAG=$TAG" >> $GITHUB_ENV
          fi

      - name: Update version in package
        run: |
          # Use bump2version to set the version
          bump2version --new-version $VERSION --no-commit --no-tag --allow-dirty dummy

      - name: Create automated release notes
        id: release_notes
        run: |
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "# CodeRefactor $VERSION" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "## What's Changed" >> $GITHUB_ENV
          git log --pretty=format:"* %s (%an)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "## Contributors" >> $GITHUB_ENV
          git log --pretty=format:"* %an" $(git describe --tags --abbrev=0 HEAD^)..HEAD | sort | uniq >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Build package
        run: |
          python -m build
          twine check dist/*

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG }}
          name: CodeRefactor ${{ env.VERSION }}
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          prerelease: ${{ contains(env.TAG, 'alpha') || contains(env.TAG, 'beta') || contains(env.TAG, 'rc') }}
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: Publish to PyPI
    needs: build
    runs-on: ubuntu-latest
    if: success() && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta')  # Only publish stable releases
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine wheel

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload dist/*

  deploy-docs:
    name: Deploy documentation
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: 'requirements/docs.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/docs.txt
          pip install -e .

      - name: Extract version from tag
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            TAG=${GITHUB_REF#refs/tags/}
            echo "VERSION=${TAG#v}" >> $GITHUB_ENV
          fi

      - name: Update documentation version
        run: |
          # Update version number in documentation
          sed -i "s/^  version: .*/  version: $VERSION/" mkdocs.yml

      - name: Build documentation
        run: |
          mkdocs build --strict

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          full_commit_message: 'docs: update documentation for version ${{ env.VERSION }}'

  notify:
    name: Notify about release
    needs: [publish, deploy-docs]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify team about success
        if: success()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "üéâ Successfully released CodeRefactor ${{ env.VERSION }} to PyPI and updated documentation!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "üéâ *Successfully released CodeRefactor ${{ env.VERSION }}*"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "‚Ä¢ Package published to PyPI\n‚Ä¢ Documentation updated\n‚Ä¢ GitHub release created"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Release"
                      },
                      "url": "https://github.com/${{ github.repository }}/releases/tag/${{ env.TAG }}"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Docs"
                      },
                      "url": "https://organization.github.io/coderefactor/"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Notify team about failure
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "‚ùå Failed to release CodeRefactor ${{ env.VERSION }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "‚ùå *Failed to release CodeRefactor ${{ env.VERSION }}*"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Please check the GitHub Actions logs for details."
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK